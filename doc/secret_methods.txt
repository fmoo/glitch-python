This document describes the secret and/or officially undocumented methods in glitch.

= auctions.search =
required role: none

Lets you search the available auctions by category or substring.  Provides
valuable aggregate metadata about all the running auctions.

examples:

- auctions.search()
error: 'no_category_or_search_term'

- auctions.search(category='tomato')
error: 'search_failed'

- auctions.search(category='tools')
response: {u'count': 34,
           u'ok': 1,
           u'results': [{u'best_cost_per': u'120',
                         u'best_cost_per_display': u'120',
                         u'category': u'tools',
                         u'class_tsid': u'bean_seasoner',
                         u'count_auctions': u'2',
                         u'count_items': u'2',
                         u'display': u'Bean Seasoner',
                         u'iconic_url': u'/items/2010-02-05/720_1265399994_iconic.png',
                         u'iconic_url_abs': u'http://c2.glitch.bz/items/2010-02-05/720_1265399994_iconic.png',
                         u'id': u'261',
                         u'name': u'Bean Seasoner',
                         u'name_plural': u'Bean Seasoners',
                         u'url': u'bean-seasoner'},
                         ...

- auctions.search(s='tom')
response: {u'count': 2,
           u'ok': 1,
           u'results': [{u'best_cost_per': u'0',
                         u'best_cost_per_display': u'<0.1',
                         u'category': u'food',
                         u'class_tsid': u'tomato',
                         u'count_auctions': u'0',
                         u'count_items': u'0',
                         u'display': u'<em>Tom</em>ato',
                         u'iconic_url': u'/items/2009-12-22/420_1261531629_iconic.png',
                         u'iconic_url_abs': u'http://c2.glitch.bz/items/2009-12-22/420_1261531629_iconic.png',
                         u'id': u'237',
                         u'name': u'Tomato',
                         u'name_plural': u'Tomatoes',
                         u'url': u'tomato'},
                        {u'best_cost_per': u'0',
                         u'best_cost_per_display': u'<0.1',
                         u'category': u'seed',
                         u'class_tsid': u'seed_tomato',
                         u'count_auctions': u'0',
                         u'count_items': u'0',
                         u'display': u'<em>Tom</em>ato Seed',
                         u'iconic_url': u'/items/2010-01-19/602_1263970920_iconic.png',
                         u'iconic_url_abs': u'http://c2.glitch.bz/items/2010-01-19/602_1263970920_iconic.png',
                         u'id': u'284',
                         u'name': u'Tomato Seed',
                         u'name_plural': u'Tomato Seeds',
                         u'url': u'tomato-seed'}]}


= auctions.cancel =
required role: site

Appears to be broken / not implemented

examples:

- auctions.cancel()
error: "method not implemented: api_auctions_cancel"


= auctions.purchase =
required role: site

I unfortunately can't figure out the parameters to this beyond player_tsid.

examples:

- auctions.purchase()
error: 'no_player_tsid'

- auctions.purchase(player_tsid='PHV...')
error: 'auction_not_found'


= client.getToken =
required role: none

There are a bunch of query parameters and other things the flash player
sends that seem really specific to the auth flow that don't really make
this a viable API method for using outside of flash.

examples:

- client.getToken()
response: {u'host': u'gs7.us-east.ec2.tinyspeck.com:443',
           u'ok': 1,
           u'token': u'.....'}


= client.performance =
required role: ?

The flash player periodically sends some debugging and perf metadata to
a logging endpoint on the tinyspeck servers.  You really don't need to
be calling this, like client.getToken(), but it's not documented, so I'm
including it here just for arguments sake

examples:

- client.performance()
response: {u'ok': 1}


= site.apiDocs =
required role: none

The api explorer on the site uses this to get the metadata about the
public API methods.  Yes, I tried passing for='auctions.purchase', and
no it didn't give me anything back :(

Note: that if you are using the python bindings, "for" is obviously a
reserved word, so you can't use it in the standard kwargs notation.
You will have to pass this parameter like: site_apiDocs(**{"for": "auctions.create"})

examples:

- site.apiDocs()
error: 'method_not_found'

- site.apiDocs(for='auctions.create')
response: {u'html': u'<dl>\n\t<dt id="auctions.create">\n\t\t<code>/simple/auctions.create</code>\n\t</dt>\n\t<dd>\n\t\tPut a stack of items up for auction.<br />\n\t\t<ul>\n\t\t\t<li> <b>stack_tsid</b> - TSID of item stack to auction. Must be somewhere in the player\'s pack. </li>\n\t\t\t<li> <b>count</b> - Number of items to auction. Should be equal or less than the size of the stack. </li>\n\t\t\t<li> <b>cost</b> - Total list price of auction. </li>\n\t\t</ul>\n\t</dd>\n</dl>\n\n\t<p>This method requires authentication with the <a href="/docs/scopes/"><b>write</b> scope</a>.</p>\n',
   u'ok': 1}
